# Week 11: Compiler Project Optimization Passes

The ANTLR4 tool was installed and ran using the instructions in the official documentations, https://github.com/antlr/antlr4/blob/master/doc/getting-started.md.

The tool and its dependencies were installed on the system using `apt`.

The generated files, including the visitor and listener files, are moved to `generated` and the object files in `objects`.

## Modifications made for the assignment

The following passes were added and ran to optimize the input Cminus code:

1. InstCombine: combines redundant instructions.
2. DeadArgumentElimination: replaces obviously dead arguments to function calls with `undef`.
3. GlobalDCE: removes unused global declarations. i.e. global variable `x` gets optimized away.
4. MergeFunctions: folds equivalent functions. i.e. `accumulateRangeCopy` gets optimized away by having its body only calling `accumulateRange`.
5. StripSymbols: strips all symbols.

## Output files

1. `C-Input.sym` contains the symbol table generated by `C-Input.txt`.
2. `C-Input.ll` and `C-Input-opt.ll` contain the IR generated without and with optimizations respectively by `C-Input.txt`.

## System

The attached CMakeLists.txt was used to compile the assignment files. The following are the version numbers of the tools used:

| Tool    | Version |
| ------- | ------- |
| Clang++ | 14.0.0  |
| CMake   | 3.22.2  |

The target machine used was an Ubuntu 20.04 64-bit virtual machine. The Linux kernel version is 5.13.0-39-generic. The following output is generated from running the command `uname -orm`:

```
5.13.0-39-generic x86_64 GNU/Linux
```
