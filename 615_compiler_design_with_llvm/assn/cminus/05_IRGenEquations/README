# Week 8: Compiler Project C- Semantic Analysis

The ANTLR4 tool was installed and ran using the instructions in the official documentations, https://github.com/antlr/antlr4/blob/master/doc/getting-started.md.

The tool and its dependencies were installed on the system using `apt`.

The generated files, including the visitor and listener files, are moved to `generated` and the object files in `objects`.

The provided Makefile compiles the main C++ script and links with the runtime library to generate the executable `Cminus`. The symbol table is implemented in the `Symtab.hpp` classes. The semantic predicates are defined in the `SemPred.hpp` classes. These class methods are injected throughout the grammar file to enforce the semantic predicates dictated in Appendix A. The symbols are added and checked by the predicate methods as necessary. The symbol table gets dumped after execution of the main script.

## Modifications made for the assignment

1. The grammar file was completely reset. Using the file provided by the professor, the Cminus grammar was implemented using condensed rules and all semantic predicate removed. The predicates that existed in the previous version of the grammar were moved to the Visitor class provided by ANTLR4.

2. The symbol table class in `Symtab.h` was refactored to account for scopes.

3. The semantics predicate class in `Semantics.h` was refactored to remove methods no longer necessary by the grammar file. Many of the functionalities were absorbed into the newly implemented Visitor class.

4. The derived Visitor class file, `CminusBaseVisitor.h`, was the only file that was modified after being generated by ANTLR4.
   1. The class methods were modified to interact with the symbol table and semantic predicates.Much of the behavior implemented by the grammar rules were restricted in the class.
   2. Expressions are calculated using the class methods and attributes. The calculations are performed by the member attributes stack `std::vector<llvm::Value*> expStack`.
   3. LLVM IR of the expressions were generated within the methods.
   4. LLVM IR of the function declarations and function calls were generated within the methods.

## Output files

1. `C-Output-0-Symbol-Table.txt` contains the symbol table generated by `C-Input-0.txt`.
1. `C-Output-0.ll` contains the IR generated by `C-Input-0.txt`.

## System

The target machine used was an Ubuntu 20.04 64-bit virtual machine. The Linux kernel version is 5.13.0-30-generic. The following output is generated from running the command `uname -orm`:

```
5.13.0-30-generic x86_64 GNU/Linux
```
